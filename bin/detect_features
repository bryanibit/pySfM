#!/usr/bin/env python
import os.path, sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

import os, sys
import time
import logging
from multiprocessing import Pool
import numpy as np
from opensfm import dataset
from opensfm import features
from opensfm import multiview

logger = logging.getLogger(__name__)

def usage():
    print 'USAGE: %s data_set_path' % sys.argv[0]
    sys.exit(0)

def detect(image):
    logger.info('Extracting {} features for image {}'.format(data.feature_type().upper(), image))
    if not data.feature_index_exists(image):
        p_unsorted, f_unsorted, c_unsorted = features.extract_features(data.image_as_array(image), data.config)
        if len(p_unsorted) == 0:
            return

        size = p_unsorted[:, 2]
        order = np.argsort(size)
        p_sorted = p_unsorted[order, :]
        f_sorted = f_unsorted[order, :]
        c_sorted = c_unsorted[order, :]
        p_pre = p_sorted[-preemptive_max:]
        f_pre = f_sorted[-preemptive_max:]
        data.save_features(image, p_sorted, f_sorted, c_sorted)
        data.save_preemptive_features(image, p_pre, f_pre)
        index = features.build_flann_index(f_sorted, data.config)
        data.save_feature_index(image, index)

if __name__ == "__main__":
    logging.basicConfig(level=logging.DEBUG)
    if len(sys.argv) > 1:
        path = sys.argv[1]
    else:
        usage()

    data = dataset.DataSet(path)
    images = data.images()
    preemptive_max = data.config.get('preemptive_max', 200)

    start = time.time()
    processes = data.config.get('processes', 1)
    if processes == 1:
        for image in images:
            detect(image)
    else:
        p = Pool(processes)
        p.map(detect, images)
    end = time.time()
    with open(data.profile_log(), 'a') as fout:
        fout.write('detect_features: {0}\n'.format(end - start))
