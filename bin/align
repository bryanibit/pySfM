#!/usr/bin/env python
import os.path, sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
import argparse

import json
import numpy as np

import opensfm.reconstruction as rc
import opensfm.io as io
from opensfm import dataset
from opensfm import exif
from opensfm import io
from opensfm.geotag_from_gpx import add_gps_to_exif


parser = argparse.ArgumentParser(
    description="Align reconstruction with exif geotag information.")
parser.add_argument('dataset',
    help='path to the dataset to be processed')
parser.add_argument('--output',
    help='file where to store the aligned reconstruction.'
        ' By default, the original reconstruction is overwritten')
parser.add_argument('--image_path',
    help='path to images')
parser.add_argument('--reconstruction_file',
    help='path to images')

args = parser.parse_args()

data_path = args.dataset

# handle GPS data
data = dataset.DataSet(data_path) # assumes that the images is in data_path/'images'
if args.image_path: data.set_image_path(args.image_path)

images = data.images()
for image in images:
    if not data.load_exif(image):
        dexif = exif.EXIF(data.load_image(image))
        exif_data = dexif.extract_exif()
        data.save_exif(image, exif_data)

if args.reconstruction_file is None:
    reconstructions = data.load_reconstruction()
else:
    with open(args.reconstruction_file) as f:
        reconstructions = io.json_loads(f.read())

# reference for conversion
try:
    reference = data.load_reference_lla()
except:
    reference = data.invent_reference_lla()


# alignment
for reconstruction in reconstructions:
    for image in reconstruction['shots'].keys():
        rc.add_gps_position(data, reconstruction['shots'][image], image)
    rc.align_reconstruction(reconstruction, data.config)

    # convert to lla
    # reference = data.invent_reference_lla(list(reconstruction['shots'].keys()))
    rc.register_reconstruction_with_gps(reconstruction, reference)

data.save_reconstruction(reconstructions, filename=args.output)



