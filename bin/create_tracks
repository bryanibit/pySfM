#!/usr/bin/env python
import pickle
import os.path, sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

import numpy as np
from itertools import combinations
import argparse
import networkx as nx
from opensfm import dataset
from opensfm import matching
import logging

logging.basicConfig(format='%(asctime)s %(message)s', level=logging.DEBUG)


parser = argparse.ArgumentParser(description='Create tracks by grouping the robust matches')
parser.add_argument('dataset',
                    help='path to the dataset to be processed')
args = parser.parse_args()


data = dataset.DataSet(args.dataset)
images = data.images()

# Read local features
logging.info('reading features')
features = {}
colors = {}
for im in images:
    p, f, c = data.load_features(im)
    features[im] = p[:,:2]
    colors[im] = c

# Read matches
matches = {}
for im1 in images:
    try:
        im1_matches = data.load_matches(im1)
    except IOError:
        continue
    for im2 in im1_matches:
        matches[im1, im2] = im1_matches[im2]
#with open('/home/open/matches.pkl', 'wb') as pk:
#    pickle.dump(matches, pk)

tracks_graph = matching.create_tracks_graph(features, colors, matches, data.config)
data.save_tracks_graph(tracks_graph)
