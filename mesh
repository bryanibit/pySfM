#!/usr/bin/env python
import os.path, sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

import argparse
import time
import json
import numpy as np
import scipy.spatial
from opensfm import dataset
from opensfm import reconstruction
from opensfm import mesh

if __name__ == "__main__":
    start = time.time()
    parser = argparse.ArgumentParser(description='Add delaunay mesh to the reconstruction')
    parser.add_argument('dataset',
                        help='path to the dataset to be processed')
    args = parser.parse_args()

    data = dataset.DataSet(args.dataset)
    graph = data.load_tracks_graph()
    reconstructions = data.load_reconstruction()

    for i, r in enumerate(reconstructions):
        for shot_id, shot in r['shots'].iteritems():
            if shot_id in graph:
                vertices, faces = mesh.triangle_mesh(shot_id, r, graph, data)
                shot['vertices'] = vertices
                shot['faces'] = faces

    data.save_reconstruction(reconstructions, filename='reconstruction.meshed.json')

    end = time.time()
    with open(data.profile_log(), 'a') as fout:
        fout.write('mesh: {0}\n'.format(end - start))
